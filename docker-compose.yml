version: '3.8'

services:
  # MongoDB Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL Service
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: neondb_owner
      POSTGRES_PASSWORD: npg_jJ2KLG4hzvMq
      POSTGRES_DB: neondb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U neondb_owner -d neondb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "5000:5000"
    environment:
      PORT: 5000
      JWT_SEC: sdcmmksck
      Cloud_Name: dwn4dsa7z
      Cloud_Api_Key: 594691339365792
      Cloud_Api_Secret: EgxqhrN4LoKy8aXBdhLADvgK5Uk
      Google_Client_id: 979430820874-gl4lub7pp6v9fp8j61870ehcg0fvoakn.apps.googleusercontent.com
      Google_client_secret: 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
      MONGO_URI: mongodb://root:example@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Author Service
  author-service:
    build:
      context: ./services/author
      dockerfile: Dockerfile
    container_name: author-service
    ports:
      - "5001:5001"
    environment:
      PORT: 5001
      JWT_SEC: sdcmmksck
      Cloud_Name: dwn4dsa7z
      Cloud_Api_Key: 594691339365792
      Cloud_Api_Secret: EgxqhrN4LoKy8aXBdhLADvgK5Uk
      Gemini_Api_Key: AIzaSyAaULUt8XKyzrEYK_ZO5_CLshghlLZUxZk
      DB_URL: postgresql://neondb_owner:npg_jJ2KLG4hzvMq@postgres:5432/neondb
      Rabbimq_Host: rabbitmq
      Rabbimq_Username: admin
      Rabbimq_Password: admin123
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5001/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Blog Service
  blog-service:
    build:
      context: ./services/blog
      dockerfile: Dockerfile
    container_name: blog-service
    ports:
      - "5002:5002"
    environment:
      PORT: 5002
      JWT_SEC: sdcmmksck
      USER_SERVICE: http://user-service:5000
      DB_URL: postgresql://neondb_owner:npg_jJ2KLG4hzvMq@postgres:5432/neondb
      REDIS_URL: redis://redis:6379
      Rabbimq_Host: rabbitmq
      Rabbimq_Username: admin
      Rabbimq_Password: admin123
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5002/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      user-service:
        condition: service_healthy
      author-service:
        condition: service_healthy
      blog-service:
        condition: service_healthy
    networks:
      - microservice-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  microservice-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
